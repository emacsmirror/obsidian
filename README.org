#+TITLE: Obsidian Notes for Emacs
[[https://melpa.org/#/obsidian][file:https://melpa.org/packages/obsidian-badge.svg]] [[https://stable.melpa.org/#/obsidian][file:https://stable.melpa.org/packages/obsidian-badge.svg]]

Emacs front-end for [[https://obsidian.md/][Obsidian Notes]].

* Table of Contents                                                     :toc:
- [[#about-obsidianel][About Obsidian.el]]
  - [[#what-should-we-keep-doing-in-obsidian][What should we keep doing in Obsidian?]]
  - [[#what-should-be-possible-to-do-in-emacs][What should be possible to do in Emacs?]]
  - [[#why-obsidianel-and-not][Why obsidian.el and not...]]
- [[#installation][Installation]]
  - [[#initel][init.el]]
  - [[#obsidian-mode][obsidian-mode]]
  - [[#obsidian-backlinks-mode][obsidian-backlinks-mode]]
  - [[#additional-customization][Additional Customization]]
- [[#usage][Usage]]
  - [[#creating-a-new-note][Creating a new note]]
  - [[#inserting-links][Inserting links]]
  - [[#following-links][Following links]]
  - [[#following-backlinks][Following backlinks]]
  - [[#jumping-between-notes][Jumping between notes]]
  - [[#move-note-to-another-folder][Move note to another folder]]
  - [[#searching-in-notes][Searching in notes]]
  - [[#inserting-tags][Inserting tags]]
  - [[#finding-all-notes-with-a-tag][Finding all notes with a tag]]
- [[#how-does-obsidianel-work][How does obsidian.el work?]]
  - [[#hydra-menu][Hydra menu]]
  - [[#manual-re-scan][Manual re-scan]]
  - [[#templates][Templates]]
  - [[#markdown-toc][markdown-toc]]
- [[#versioning][Versioning]]
- [[#contributing][Contributing]]
  - [[#development-tasks][Development tasks]]
  - [[#internal-workings][Internal Workings]]
- [[#gratitude][Gratitude]]

* About Obsidian.el

I wanted to work with Obsidian Notes using Emacs. Obviously you already can open your Obsidian folder and start editing markdown files with Emacs. But I want to improve that and split the responsibilities between Emacs and Obsidian the way it makes sense for an Emacs user.

** What should we keep doing in Obsidian?
- Sync
- Mobile client (of course, and that's where Obsidian beats anything else in Emacs)
- Complex exploring (graph views etc)
- All the things done with complex plugins

** What should be possible to do in Emacs?
Obsidian.el must empower us to stay in Emacs for things that make sense in Emacs:

- Creating and editing notes with convenient auto-complete for tags and links (nothing will ever compare to Emacs in terms of editing power)
- Jumping between notes
- Searching all notes
- Finding all notes with a tag
- Following backlinks
- Viewing backlinks in a separate list

With the above functionality we will almost never need the Obsidian app on desktop, but will still be able to use it on mobile or when specifically needed.

** Why obsidian.el and not...
*** Obsidian App itself, Athens Research or any other great app?
Easy. When on desktop they are simply not Emacs.  Not even Obsidian itself. Emacs beats anything else for things that it is built for. But you know this already, otherwise you wouldn't be here.

*** org-roam or any other great Emacs libraries?
The answer is mostly the same for all of them. Mobile support. Or rather â€” NO mobile support. I don't buy into the story that "you don't really need your PKM system on mobile", and "serious work is done only on desktop" etc. These are just excuses for the impossibility of building a full-fledged mobile version of Emacs.

So there were two ways to go about it: build a mobile app for something like org-roam (which would be cool, but is above my front-end skills) or build a light-weight Emacs client for something like Obsidian. I chose the simpler task.

* Installation
Obsidian.el is available from [[https://melpa.org][MELPA]] or [[https://stable.melpa.org/#/obsidian][MELPA Stable]] and can be installed with:

#+begin_src
  M-x package-install RET obsidian RET
#+end_src

You'll then want to enable ~obsidian-mode~ as well as the optional ~obsidian-backlinks-mode~ if you'd like to use the backlinks panel.

Below is an example configuration that can be used in your ~init.el~ file:

#+begin_src elisp
(require 'obsidian)
;; Location of obsidian vault
(setq obsidian-path "~/MY_OBSIDIAN_FOLDER")
;; Default location for new notes from `obsidian-capture'
(setq obsidian-inbox-directory "Inbox")
;; Useful if you're going to be using wiki links
(setq markdown-enable-wiki-links t)

;; These bindings are only suggestions; it's okay to use other bindings
;; Open note
(define-key obsidian-mode-map (kbd "C-c C-p") 'obsidian-jump)
;; Open link at point
(define-key obsidian-mode-map (kbd "C-c C-o") 'obsidian-follow-link-at-point)
;; Follow a backlink for the current file
(define-key obsidian-mode-map (kbd "C-c C-b") 'obsidian-backlink-jump)
;; If you prefer you can use `obsidian-insert-wikilink'
(define-key obsidian-mode-map (kbd "C-c C-l") 'obsidian-insert-link)

;; Activate obsidian mode and backlinks mode
(global-obsidian-mode t)
(obsidian-backlinks-mode t)
#+end_src

or using [[https://github.com/jwiegley/use-package][use-package]]:

#+begin_src elisp

(use-package obsidian
  :config
  (global-obsidian-mode t)
  (obsidian-backlinks-mode t)
  :custom
  ;; location of obsidian vault
  (obsidian-path "~/MY_OBSIDIAN_FOLDER")
  ;; Default location for new notes from `obsidian-capture'
  (obsidian-inbox-directory "Inbox")
  ;; Useful if you're going to be using wiki links
  (markdown-enable-wiki-links t)

  ;; These bindings are only suggestions; it's okay to use other bindings
  :bind (:map obsidian-mode-map
              ;; Open note
              ("C-c C-p" . obsidian-jump)
              ;; Open link at point
              ("C-c C-o" . obsidian-follow-link-at-point)
              ;; Follow a backlink for the current file
              ("C-c C-b" . obsidian-backlink-jump)
              ;; If you prefer you can use `obsidian-insert-wikilink'
              ("C-c C-l" . obsidian-insert-link)))

#+end_src

** Custom Variables
In addition to the settings show in the example configurations above, some other common variables that you may wish to configure include:

- obsidian-inbox-directory :: location for new notes created via ~obsidian-capture~
- obsidian-daily-notes-directory :: location for new notes created via ~obsidian-daily-note~
- obsidian-templates-directory :: location for obsidian.el to find template files
- obsidian-daily-note-template :: name of template file to use for daily notes
- obsidian-include-hidden-files :: configure obsidian.el to either track or ignore hidden files
- obsidian-create-unfound-files-in-inbox :: whether to create files for unfound links in inbox or in same directory as file
- obsidian-backlinks-panel-position :: which side of the window to host backlinks panel: 'left or 'right
- obsidian-backlinks-panel-width :: width of the backlinks panel in characters
- obsidian-backlinks-filename-proportion :: Proportion of space to be used to display file name vs link text. A value of 1.0 will use 2 lines.

* Usage

** Creating a new note
Use ~obsidian-capture~ to create new notes.

#+begin_src
  M-x obsidian-capture RET
#+end_src

If you specified ~obsidian-inbox-directory~, the new note will be created in this directory. Otherwise they will be placed in your Obsidian vault root directory specified by ~obsidian-directory~.

*** Daily Notes
You can create a daily note using the command ~obsidian-daily-note~. If set, this note will use the template specified by ~obsidian-daily-note-template~.

** Inserting links
[[./resources/insert-link.png]]

There are two commands to insert links: ~obsidian-insert-link~ and ~obsidian-insert-wikilink~.  You can choose one depending on your preferred link format.

When inserting links, two different formats can be used to specify the file: the filename alone, or the path to the file within the Obsidian vault.  The default is to only use the filename, but this behavior can be changed by setting the variable ~obsidian-links-use-vault-path~ to ~t~.  Alternately, using the prefix argument before the call to insert a link will toggle this behavior, inserting a link with the format opposite of this variable.

When inserting links for files that don't exist, an empty file will be created.  The location of this new file depends upon the variable ~obsidian-create-unfound-files-in-inbox~.  For a non-nil value, the files will be created in the directory specified by ~obsidian-inbox-directory~ if that value is set, or in the ~obsidian-directory~ otherwise.  If ~obsidian-create-unfound-files-in-inbox~ is nil, new files will be created in the same directory into which the link is inserted.

*** Inserts a link in Markdown format
Example: ~[Link description](path/to/file.md)~
#+begin_src
M-x obsidian-insert-link RET
#+end_src

Note, that when you insert a link to file that has spaces in it's name, like "facts about inserting links.md", Obsidian app would HTML-format the spaces, meaning the link will look like

#+begin_src text
[facts](facts%20about%20inserting%20links.md)
#+end_src

Obsidian.el follows this convention and does the same when inserting markdown links. ~obsidian-follow-link-at-point~ handles this correctly.

*** Insert a link in wikilink format
Example: ~[[path/fo/file.md|Link description]]~

#+begin_src
  M-x obsidian-insert-wikilink RET
#+end_src

*** Removing a link
If you have a link but decide that you'd like to remove it while keeping the link text, use the command ~obsidian-remove-link~.

** Following links
Obsidian.el implements a custom command ~obsidian-follow-link-at-point~ which correctly follows markdown and wiki links generated by the Obsidian App, as well as backlinks and markdown-toc links created in obsidian.el. In the installation example above, this command is bound to ~C-c C-o~ in ~obsidian-mode~.

#+begin_src
M-x obsidian-follow-link-at-point RET
#+end_src

After following a link, you can return to the previous note using ~obsidian-jump-back~.

*** Multiple matches
Obsidian doesn't insert relative path by default, only does it when there are multiple files with the same name. ~obsidian-follow-link-at-point~ handles this correctly. Every time you follow a link it checks, if there's only one match for the filename linked. If there's just one it simply opens that file. If there's more than one it prompts you to select which file to open.

** Following backlinks
If ~obsidian-backlinks-mode~ is enabled, running the command ~obsidian-backlink-jump~ will move the cursor to and from the backlinks panel.  From the backlinks panel, a backlink can be visited using ~obsidian-follow-link-at-point~.

If ~obsidian-backlinks-mode~ is disabled, you can quickly jump to a backlink from the current file using ~obsidian-backlink-jump~.

#+begin_src
M-x obsidian-backlink-jump RET
#+end_src

After jumping to a backlink, you can return to the previous note using ~obsidian-jump-back~.

*** Backlinks panel and obsidian-backlinks-mode
~obsidian-backlinks-mode~ is a minor mode that provides a side panel for displaying the backlinks of the current note file.  The placement and size of the panel can be customized as part of the =obsidian= group.  A =Bk= will be shown in the modeline to indicate when this minor mode is active.

#+begin_src
M-x obsidian-backlinks-mode RET
#+end_src

If backlinks mode is active, a call to ~obsidian-backlink-jump~ will move the cursor to the backlinks panel where a link can be visited using ~obsidian-follow-link-at-point~.  Alternatively, a call to ~obsidian-backlink-jump~ from within the backlinks panel will return the cursor to the previously visited note window.

The backlinks panel can be toggled open and closed using ~obsidian-toggle-backlinks-panel~.  Even if the panel is toggled closed, a called to ~obsidian-backlink-jump~ with re-open the backlinks panel and move the cursor to that window.

#+begin_src
M-x obsidian-toggle-backlinks-panel RET
#+end_src

If ~obsidian-backlinks-mode~ is active when ~obsidian-backlink-jump~ is called, the cursor will move to the backlinks panel.  From the backlinks panel, notes can be visited using ~obsidian-follow-link-at-point~.

** Jumping between notes
Quickly jump between notes using ~obsidian-jump~

#+begin_src
  M-x obsidian-jump RET
#+end_src

*** Aliases
If you have YAML front matter in your note, Obsidian.el will find aliases in it and add them to the ~obsidian-jump~ selection. Both ~aliases~ and ~alias~ keys are supported.

*** Returning to previous location
After jumping to a new note, or following a link or backlink, you can return to your previous location using ~obsidian-jump-back~.

** Move note to another folder
Use ~obsidian-move-file~ to move current note to another folder:

#+begin_src
  M-x obsidian-move-file RET
#+end_src

** Searching in notes
Use ~obsidian-search~ to look for a string or a regular expression within the notes in your vault:

#+begin_src
  M-x obsidian-search RET query RET
#+end_src

** Inserting tags

** Finding all notes with a tag
Use ~obsidian-find-tag~ to list all notes that contain a tag.

#+begin_src
  M-x obsidian-find-tag RET
#+end_src

** markdown-mode functionality
obsidian.el builds upon [[https://jblevins.org/projects/markdown-mode/][markdown-mode]], and therefore there is some functionality provided by ~markdown-mode~ that can be useful when using obsidian.el

- markdown-next-link :: move cursor to next link in note (M-n by default)
- markdown-previous-link :: move cursor to previous link in note (M-p by default)
- markdown-toggle-markup-hiding :: hide markdown formatting to view raw text


** [[https://github.com/abo-abo/hydra][Hydra]] menu

When [[https://github.com/abo-abo/hydra][Hydra]] is installed, ~obsidian-hydra~ will be defined such that it can be used for bindings:

#+begin_src elisp
  (define-key obsidian-mode-map (kbd "C-c M-o") 'obsidian-hydra/body)
#+end_src

[[./resources/hydra-menu.png]]

** Manual re-scan
Metadata for a note, including links, backlinks, tags, and aliases, will not be recognized until after a call to ~obsidian-update~.  This function is called automatically each time a file is saved, as well as periodically if ~obsidian-use-update-timer~ is non-nil.

However, if you believe that the metadata is not currently in sync with the vault contents, an update can be manually run using ~obsidian-update~:

#+begin_src
M-x obsidian-update RET
#+end_src

If this still doesn't seem to fix the issue, the entire vault can be re-scanned by first clearing out the old vault cache, and then repopulating it with the following set of commands:

#+begin_src
M-x obsidian-clear-cache RET
M-x obsidian-update RET
#+end_src

** Templates

Obsidian.el has a basic template support, where the Obsidian app's template placeholders can be used,
without customization. {{title}}, {{date}}, and {{time}} can be used. {{title}} is the name of the file without the extension.

** markdown-toc

Obsidian.el recognized ~markdown-toc~ as a way to generate a table of contents for a note file.

* Versioning
The project uses [[https://github.com/ptaoussanis/encore/blob/master/BREAK-VERSIONING.md][break versioning]], meaning that upgrading from 1.0.x to 1.0.y will always be safe, upgrading from 1.x.x to 1.y.x might break something small, and upgrade from x.x.x to y.x.x will break almost everything.

* Architecture of obsidian.el

** Data Structures

*** obsidian--vault-cache
This is the main data structure used for the vault file metadata.

The ~obsidian--vault-cache~ is a nested hash table where the keys are absolute file paths for the files tracked by obsidian in the vault.  The values are also hash tables with the keys tags, aliases, and links.  The tags and aliases are lists of the tags and aliases associated with that file specified by the key.  The links are all of the links within that file, and the values are the response lists from the call to ~markdown-link-at-pos~ that includes the link, the link text, and the position of the link within the file.

#+begin_src
{<filepath> : {'tags: (list of tags associated with file)
               'aliases: (list of aliases associated with file)
               'links: {<linked-file-name: (response from markdown-link-at-pos)}}}
#+end_src

*** obsidian--aliases-map
A simple hash table where each key is an alias, and the value is the absolute file path associated with that alias.

#+begin_src
{<alias> : <filepath>}
#+end_src

** obsidian-populate-cache
Function that rebuilds both ~obsidian--vault-cache~ and ~obsidian--aliases-map~.

This is a relatively heavy operation so ideally would only called at startup by ~after-init-hook~.  All relevant information is retrieved with a single reading of the files on disk with an associated single call to ~with-temp-buffer~.

The rough pseudo-code for this function looks like this:
  - ~directory-files-recursively~
    - ~obsidian--add-file~
      - ~obsidian--update-file-metadata~
        - ~obsidian--find-tags-in-string~
        - ~obsidian--find-aliases-in-string~
        - ~obsidian--find-links~

** obsidian-update
Compares the list of currently cached files against the files on disk, removing any files from cache that no longer exist and adding files that exist on disk but not in the cache.

Will call ~obsidian-populate-cache~ if that function has not yet been run, but it should be run on startup.

** Update Timer
All of the file and metadata updates should be handled by the functions and hooks of =obsidian.el= when a file is saved or moved.  However, if a file is add or deleted out of band of =obsidian.el= by some other process, we need a way to include the information in our caches.

In order to do these, a timer is start that periodically calls ~obsidian-update~. The timer waits for a specified amount of time, and then waits for Emacs to be idle before calling the update function. In this way it aims to be as unobtrusive to the user as possible while still recognizing files that have been modified out of band.

The code snippet below creates a timer called =update-timer= that runs every 5 minutes (5 * 60 seconds) and then waits for a 5 second period when Emacs is idle before calling =obsidian-update=.

Setting the value of ~obsidian-use-update-timer~ to nil will disable this timer.  If it's already running, call to ~obsidian-stop-update-timer~ will stop it.

** obsidian--add-file
One of the two main internal functions along with ~obsidian--remove-file~.

File will be added to the cache if it's not already there, the tags list and alias list for that file will be updated, and finally the aliases list will be synced with the obsidian--aliases-map.

1. file added to the cache
2. update tags for file
3. update aliases for file
4. sync list of aliases with ~obsidian--aliases-map~

** obsidian--remove-file
One of the two main internal functions along with ~obsidian--add-file~.

1. Remove aliases for file from ~obsidian--aliases-map~
2. Remove file record from ~obsidian--vault-cache~

** obsidian--update-on-save
Function meant to be added as a hook to ~after-save-hook~.

Checks to see if the saved file is an obsidian file, and if so, the record in the vault cache for the file is updated with a call to ~obsidian--add-file~.

** Backlinks panel
The backlinks panel behavior was modeled after [[https://github.com/Alexander-Miller/treemacs][treemacs]].

* Contributing
PRs and issues are very welcome. In order to develop locally you need to install [[https://github.com/doublep/eldev/][eldev]]. After that you can run ~make~ commands, in particular ~make test~ and ~make lint~ to make sure that your code will pass all MELPA checks.

Take a look at the open [[https://github.com/licht1stein/obsidian.el/issues][issues]] if you're looking for a way to contribute.

If updating this README file, note that the table of contents is generate with the package ~toc-org~.

* Gratitude
- The work on Obsidian.el was made considerably easier and definitely more fun thanks to the great work of [[https://github.com/magnars][Magnar Sveen]] and his packages [[https://github.com/magnars/dash.el][dash.el]] and [[https://github.com/magnars/s.el][s.el]]. Thank you for making Elisp almost as convenient as Clojure!

- During the development of Obsidian.el I have learned and copied from the code of the amazing [[https://github.com/org-roam/org-roam][org-roam]] package. Thank you!
